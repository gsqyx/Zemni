// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Queue.proto

#ifndef PROTOBUF_INCLUDED_Queue_2eproto
#define PROTOBUF_INCLUDED_Queue_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Queue_2eproto 

namespace protobuf_Queue_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Queue_2eproto
namespace Zemni_protobuf {
class DataStreamConsumerConnect;
class DataStreamConsumerConnectDefaultTypeInternal;
extern DataStreamConsumerConnectDefaultTypeInternal _DataStreamConsumerConnect_default_instance_;
class DataStreamProducerReset;
class DataStreamProducerResetDefaultTypeInternal;
extern DataStreamProducerResetDefaultTypeInternal _DataStreamProducerReset_default_instance_;
class NodeRegister;
class NodeRegisterDefaultTypeInternal;
extern NodeRegisterDefaultTypeInternal _NodeRegister_default_instance_;
class NodeRegisterReply;
class NodeRegisterReplyDefaultTypeInternal;
extern NodeRegisterReplyDefaultTypeInternal _NodeRegisterReply_default_instance_;
class QueueReleaseRequest;
class QueueReleaseRequestDefaultTypeInternal;
extern QueueReleaseRequestDefaultTypeInternal _QueueReleaseRequest_default_instance_;
class QueueRequest;
class QueueRequestDefaultTypeInternal;
extern QueueRequestDefaultTypeInternal _QueueRequest_default_instance_;
}  // namespace Zemni_protobuf
namespace google {
namespace protobuf {
template<> ::Zemni_protobuf::DataStreamConsumerConnect* Arena::CreateMaybeMessage<::Zemni_protobuf::DataStreamConsumerConnect>(Arena*);
template<> ::Zemni_protobuf::DataStreamProducerReset* Arena::CreateMaybeMessage<::Zemni_protobuf::DataStreamProducerReset>(Arena*);
template<> ::Zemni_protobuf::NodeRegister* Arena::CreateMaybeMessage<::Zemni_protobuf::NodeRegister>(Arena*);
template<> ::Zemni_protobuf::NodeRegisterReply* Arena::CreateMaybeMessage<::Zemni_protobuf::NodeRegisterReply>(Arena*);
template<> ::Zemni_protobuf::QueueReleaseRequest* Arena::CreateMaybeMessage<::Zemni_protobuf::QueueReleaseRequest>(Arena*);
template<> ::Zemni_protobuf::QueueRequest* Arena::CreateMaybeMessage<::Zemni_protobuf::QueueRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Zemni_protobuf {

enum Type {
  NONE = 0,
  NODE_REGISTER = 1,
  NODE_REGISTER_REPLY = 2,
  QUEUE_REQUEST = 3,
  QUEUE_RELEASE_REQUEST = 5,
  DATASTREAM_PRODUCER_RESET = 7,
  DATASTREAM_CONSUMER_CONNECT = 8,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Type_IsValid(int value);
const Type Type_MIN = NONE;
const Type Type_MAX = DATASTREAM_CONSUMER_CONNECT;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
// ===================================================================

class NodeRegister : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Zemni_protobuf.NodeRegister) */ {
 public:
  NodeRegister();
  virtual ~NodeRegister();

  NodeRegister(const NodeRegister& from);

  inline NodeRegister& operator=(const NodeRegister& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeRegister(NodeRegister&& from) noexcept
    : NodeRegister() {
    *this = ::std::move(from);
  }

  inline NodeRegister& operator=(NodeRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeRegister* internal_default_instance() {
    return reinterpret_cast<const NodeRegister*>(
               &_NodeRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NodeRegister* other);
  friend void swap(NodeRegister& a, NodeRegister& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeRegister* New() const final {
    return CreateMaybeMessage<NodeRegister>(NULL);
  }

  NodeRegister* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeRegister>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeRegister& from);
  void MergeFrom(const NodeRegister& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeRegister* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host = 1;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // @@protoc_insertion_point(class_scope:Zemni_protobuf.NodeRegister)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Queue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NodeRegisterReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Zemni_protobuf.NodeRegisterReply) */ {
 public:
  NodeRegisterReply();
  virtual ~NodeRegisterReply();

  NodeRegisterReply(const NodeRegisterReply& from);

  inline NodeRegisterReply& operator=(const NodeRegisterReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeRegisterReply(NodeRegisterReply&& from) noexcept
    : NodeRegisterReply() {
    *this = ::std::move(from);
  }

  inline NodeRegisterReply& operator=(NodeRegisterReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeRegisterReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeRegisterReply* internal_default_instance() {
    return reinterpret_cast<const NodeRegisterReply*>(
               &_NodeRegisterReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NodeRegisterReply* other);
  friend void swap(NodeRegisterReply& a, NodeRegisterReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeRegisterReply* New() const final {
    return CreateMaybeMessage<NodeRegisterReply>(NULL);
  }

  NodeRegisterReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeRegisterReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeRegisterReply& from);
  void MergeFrom(const NodeRegisterReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeRegisterReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 actor_port = 2;
  void clear_actor_port();
  static const int kActorPortFieldNumber = 2;
  ::google::protobuf::int32 actor_port() const;
  void set_actor_port(::google::protobuf::int32 value);

  // int32 zmq_port = 3;
  void clear_zmq_port();
  static const int kZmqPortFieldNumber = 3;
  ::google::protobuf::int32 zmq_port() const;
  void set_zmq_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Zemni_protobuf.NodeRegisterReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 actor_port_;
  ::google::protobuf::int32 zmq_port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Queue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueueRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Zemni_protobuf.QueueRequest) */ {
 public:
  QueueRequest();
  virtual ~QueueRequest();

  QueueRequest(const QueueRequest& from);

  inline QueueRequest& operator=(const QueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueueRequest(QueueRequest&& from) noexcept
    : QueueRequest() {
    *this = ::std::move(from);
  }

  inline QueueRequest& operator=(QueueRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueueRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueueRequest* internal_default_instance() {
    return reinterpret_cast<const QueueRequest*>(
               &_QueueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(QueueRequest* other);
  friend void swap(QueueRequest& a, QueueRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueueRequest* New() const final {
    return CreateMaybeMessage<QueueRequest>(NULL);
  }

  QueueRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueueRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueueRequest& from);
  void MergeFrom(const QueueRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueueRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::int32 node_id() const;
  void set_node_id(::google::protobuf::int32 value);

  // int32 queue_id = 2;
  void clear_queue_id();
  static const int kQueueIdFieldNumber = 2;
  ::google::protobuf::int32 queue_id() const;
  void set_queue_id(::google::protobuf::int32 value);

  // bool as_consumer = 3;
  void clear_as_consumer();
  static const int kAsConsumerFieldNumber = 3;
  bool as_consumer() const;
  void set_as_consumer(bool value);

  // @@protoc_insertion_point(class_scope:Zemni_protobuf.QueueRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 node_id_;
  ::google::protobuf::int32 queue_id_;
  bool as_consumer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Queue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueueReleaseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Zemni_protobuf.QueueReleaseRequest) */ {
 public:
  QueueReleaseRequest();
  virtual ~QueueReleaseRequest();

  QueueReleaseRequest(const QueueReleaseRequest& from);

  inline QueueReleaseRequest& operator=(const QueueReleaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueueReleaseRequest(QueueReleaseRequest&& from) noexcept
    : QueueReleaseRequest() {
    *this = ::std::move(from);
  }

  inline QueueReleaseRequest& operator=(QueueReleaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueueReleaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueueReleaseRequest* internal_default_instance() {
    return reinterpret_cast<const QueueReleaseRequest*>(
               &_QueueReleaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(QueueReleaseRequest* other);
  friend void swap(QueueReleaseRequest& a, QueueReleaseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueueReleaseRequest* New() const final {
    return CreateMaybeMessage<QueueReleaseRequest>(NULL);
  }

  QueueReleaseRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueueReleaseRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueueReleaseRequest& from);
  void MergeFrom(const QueueReleaseRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueueReleaseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 queue_id = 1;
  void clear_queue_id();
  static const int kQueueIdFieldNumber = 1;
  ::google::protobuf::int32 queue_id() const;
  void set_queue_id(::google::protobuf::int32 value);

  // bool as_consumer = 2;
  void clear_as_consumer();
  static const int kAsConsumerFieldNumber = 2;
  bool as_consumer() const;
  void set_as_consumer(bool value);

  // bool delete = 3;
  void clear_delete_();
  static const int kDeleteFieldNumber = 3;
  bool delete_() const;
  void set_delete_(bool value);

  // @@protoc_insertion_point(class_scope:Zemni_protobuf.QueueReleaseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 queue_id_;
  bool as_consumer_;
  bool delete__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Queue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataStreamProducerReset : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Zemni_protobuf.DataStreamProducerReset) */ {
 public:
  DataStreamProducerReset();
  virtual ~DataStreamProducerReset();

  DataStreamProducerReset(const DataStreamProducerReset& from);

  inline DataStreamProducerReset& operator=(const DataStreamProducerReset& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataStreamProducerReset(DataStreamProducerReset&& from) noexcept
    : DataStreamProducerReset() {
    *this = ::std::move(from);
  }

  inline DataStreamProducerReset& operator=(DataStreamProducerReset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataStreamProducerReset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataStreamProducerReset* internal_default_instance() {
    return reinterpret_cast<const DataStreamProducerReset*>(
               &_DataStreamProducerReset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DataStreamProducerReset* other);
  friend void swap(DataStreamProducerReset& a, DataStreamProducerReset& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataStreamProducerReset* New() const final {
    return CreateMaybeMessage<DataStreamProducerReset>(NULL);
  }

  DataStreamProducerReset* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataStreamProducerReset>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataStreamProducerReset& from);
  void MergeFrom(const DataStreamProducerReset& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataStreamProducerReset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 queue_id = 1;
  void clear_queue_id();
  static const int kQueueIdFieldNumber = 1;
  ::google::protobuf::int32 queue_id() const;
  void set_queue_id(::google::protobuf::int32 value);

  // int32 dst_port = 3;
  void clear_dst_port();
  static const int kDstPortFieldNumber = 3;
  ::google::protobuf::int32 dst_port() const;
  void set_dst_port(::google::protobuf::int32 value);

  // int32 dst_host_id = 4;
  void clear_dst_host_id();
  static const int kDstHostIdFieldNumber = 4;
  ::google::protobuf::int32 dst_host_id() const;
  void set_dst_host_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Zemni_protobuf.DataStreamProducerReset)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 queue_id_;
  ::google::protobuf::int32 dst_port_;
  ::google::protobuf::int32 dst_host_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Queue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataStreamConsumerConnect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Zemni_protobuf.DataStreamConsumerConnect) */ {
 public:
  DataStreamConsumerConnect();
  virtual ~DataStreamConsumerConnect();

  DataStreamConsumerConnect(const DataStreamConsumerConnect& from);

  inline DataStreamConsumerConnect& operator=(const DataStreamConsumerConnect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataStreamConsumerConnect(DataStreamConsumerConnect&& from) noexcept
    : DataStreamConsumerConnect() {
    *this = ::std::move(from);
  }

  inline DataStreamConsumerConnect& operator=(DataStreamConsumerConnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataStreamConsumerConnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataStreamConsumerConnect* internal_default_instance() {
    return reinterpret_cast<const DataStreamConsumerConnect*>(
               &_DataStreamConsumerConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DataStreamConsumerConnect* other);
  friend void swap(DataStreamConsumerConnect& a, DataStreamConsumerConnect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataStreamConsumerConnect* New() const final {
    return CreateMaybeMessage<DataStreamConsumerConnect>(NULL);
  }

  DataStreamConsumerConnect* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataStreamConsumerConnect>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataStreamConsumerConnect& from);
  void MergeFrom(const DataStreamConsumerConnect& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataStreamConsumerConnect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dst_host = 1;
  void clear_dst_host();
  static const int kDstHostFieldNumber = 1;
  const ::std::string& dst_host() const;
  void set_dst_host(const ::std::string& value);
  #if LANG_CXX11
  void set_dst_host(::std::string&& value);
  #endif
  void set_dst_host(const char* value);
  void set_dst_host(const char* value, size_t size);
  ::std::string* mutable_dst_host();
  ::std::string* release_dst_host();
  void set_allocated_dst_host(::std::string* dst_host);

  // int32 dst_host_id = 2;
  void clear_dst_host_id();
  static const int kDstHostIdFieldNumber = 2;
  ::google::protobuf::int32 dst_host_id() const;
  void set_dst_host_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Zemni_protobuf.DataStreamConsumerConnect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr dst_host_;
  ::google::protobuf::int32 dst_host_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Queue_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeRegister

// string host = 1;
inline void NodeRegister::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeRegister::host() const {
  // @@protoc_insertion_point(field_get:Zemni_protobuf.NodeRegister.host)
  return host_.GetNoArena();
}
inline void NodeRegister::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Zemni_protobuf.NodeRegister.host)
}
#if LANG_CXX11
inline void NodeRegister::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Zemni_protobuf.NodeRegister.host)
}
#endif
inline void NodeRegister::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Zemni_protobuf.NodeRegister.host)
}
inline void NodeRegister::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Zemni_protobuf.NodeRegister.host)
}
inline ::std::string* NodeRegister::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:Zemni_protobuf.NodeRegister.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeRegister::release_host() {
  // @@protoc_insertion_point(field_release:Zemni_protobuf.NodeRegister.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeRegister::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:Zemni_protobuf.NodeRegister.host)
}

// -------------------------------------------------------------------

// NodeRegisterReply

// int32 id = 1;
inline void NodeRegisterReply::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 NodeRegisterReply::id() const {
  // @@protoc_insertion_point(field_get:Zemni_protobuf.NodeRegisterReply.id)
  return id_;
}
inline void NodeRegisterReply::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Zemni_protobuf.NodeRegisterReply.id)
}

// int32 actor_port = 2;
inline void NodeRegisterReply::clear_actor_port() {
  actor_port_ = 0;
}
inline ::google::protobuf::int32 NodeRegisterReply::actor_port() const {
  // @@protoc_insertion_point(field_get:Zemni_protobuf.NodeRegisterReply.actor_port)
  return actor_port_;
}
inline void NodeRegisterReply::set_actor_port(::google::protobuf::int32 value) {
  
  actor_port_ = value;
  // @@protoc_insertion_point(field_set:Zemni_protobuf.NodeRegisterReply.actor_port)
}

// int32 zmq_port = 3;
inline void NodeRegisterReply::clear_zmq_port() {
  zmq_port_ = 0;
}
inline ::google::protobuf::int32 NodeRegisterReply::zmq_port() const {
  // @@protoc_insertion_point(field_get:Zemni_protobuf.NodeRegisterReply.zmq_port)
  return zmq_port_;
}
inline void NodeRegisterReply::set_zmq_port(::google::protobuf::int32 value) {
  
  zmq_port_ = value;
  // @@protoc_insertion_point(field_set:Zemni_protobuf.NodeRegisterReply.zmq_port)
}

// -------------------------------------------------------------------

// QueueRequest

// int32 node_id = 1;
inline void QueueRequest::clear_node_id() {
  node_id_ = 0;
}
inline ::google::protobuf::int32 QueueRequest::node_id() const {
  // @@protoc_insertion_point(field_get:Zemni_protobuf.QueueRequest.node_id)
  return node_id_;
}
inline void QueueRequest::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:Zemni_protobuf.QueueRequest.node_id)
}

// int32 queue_id = 2;
inline void QueueRequest::clear_queue_id() {
  queue_id_ = 0;
}
inline ::google::protobuf::int32 QueueRequest::queue_id() const {
  // @@protoc_insertion_point(field_get:Zemni_protobuf.QueueRequest.queue_id)
  return queue_id_;
}
inline void QueueRequest::set_queue_id(::google::protobuf::int32 value) {
  
  queue_id_ = value;
  // @@protoc_insertion_point(field_set:Zemni_protobuf.QueueRequest.queue_id)
}

// bool as_consumer = 3;
inline void QueueRequest::clear_as_consumer() {
  as_consumer_ = false;
}
inline bool QueueRequest::as_consumer() const {
  // @@protoc_insertion_point(field_get:Zemni_protobuf.QueueRequest.as_consumer)
  return as_consumer_;
}
inline void QueueRequest::set_as_consumer(bool value) {
  
  as_consumer_ = value;
  // @@protoc_insertion_point(field_set:Zemni_protobuf.QueueRequest.as_consumer)
}

// -------------------------------------------------------------------

// QueueReleaseRequest

// int32 queue_id = 1;
inline void QueueReleaseRequest::clear_queue_id() {
  queue_id_ = 0;
}
inline ::google::protobuf::int32 QueueReleaseRequest::queue_id() const {
  // @@protoc_insertion_point(field_get:Zemni_protobuf.QueueReleaseRequest.queue_id)
  return queue_id_;
}
inline void QueueReleaseRequest::set_queue_id(::google::protobuf::int32 value) {
  
  queue_id_ = value;
  // @@protoc_insertion_point(field_set:Zemni_protobuf.QueueReleaseRequest.queue_id)
}

// bool as_consumer = 2;
inline void QueueReleaseRequest::clear_as_consumer() {
  as_consumer_ = false;
}
inline bool QueueReleaseRequest::as_consumer() const {
  // @@protoc_insertion_point(field_get:Zemni_protobuf.QueueReleaseRequest.as_consumer)
  return as_consumer_;
}
inline void QueueReleaseRequest::set_as_consumer(bool value) {
  
  as_consumer_ = value;
  // @@protoc_insertion_point(field_set:Zemni_protobuf.QueueReleaseRequest.as_consumer)
}

// bool delete = 3;
inline void QueueReleaseRequest::clear_delete_() {
  delete__ = false;
}
inline bool QueueReleaseRequest::delete_() const {
  // @@protoc_insertion_point(field_get:Zemni_protobuf.QueueReleaseRequest.delete)
  return delete__;
}
inline void QueueReleaseRequest::set_delete_(bool value) {
  
  delete__ = value;
  // @@protoc_insertion_point(field_set:Zemni_protobuf.QueueReleaseRequest.delete)
}

// -------------------------------------------------------------------

// DataStreamProducerReset

// int32 queue_id = 1;
inline void DataStreamProducerReset::clear_queue_id() {
  queue_id_ = 0;
}
inline ::google::protobuf::int32 DataStreamProducerReset::queue_id() const {
  // @@protoc_insertion_point(field_get:Zemni_protobuf.DataStreamProducerReset.queue_id)
  return queue_id_;
}
inline void DataStreamProducerReset::set_queue_id(::google::protobuf::int32 value) {
  
  queue_id_ = value;
  // @@protoc_insertion_point(field_set:Zemni_protobuf.DataStreamProducerReset.queue_id)
}

// int32 dst_port = 3;
inline void DataStreamProducerReset::clear_dst_port() {
  dst_port_ = 0;
}
inline ::google::protobuf::int32 DataStreamProducerReset::dst_port() const {
  // @@protoc_insertion_point(field_get:Zemni_protobuf.DataStreamProducerReset.dst_port)
  return dst_port_;
}
inline void DataStreamProducerReset::set_dst_port(::google::protobuf::int32 value) {
  
  dst_port_ = value;
  // @@protoc_insertion_point(field_set:Zemni_protobuf.DataStreamProducerReset.dst_port)
}

// int32 dst_host_id = 4;
inline void DataStreamProducerReset::clear_dst_host_id() {
  dst_host_id_ = 0;
}
inline ::google::protobuf::int32 DataStreamProducerReset::dst_host_id() const {
  // @@protoc_insertion_point(field_get:Zemni_protobuf.DataStreamProducerReset.dst_host_id)
  return dst_host_id_;
}
inline void DataStreamProducerReset::set_dst_host_id(::google::protobuf::int32 value) {
  
  dst_host_id_ = value;
  // @@protoc_insertion_point(field_set:Zemni_protobuf.DataStreamProducerReset.dst_host_id)
}

// -------------------------------------------------------------------

// DataStreamConsumerConnect

// string dst_host = 1;
inline void DataStreamConsumerConnect::clear_dst_host() {
  dst_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataStreamConsumerConnect::dst_host() const {
  // @@protoc_insertion_point(field_get:Zemni_protobuf.DataStreamConsumerConnect.dst_host)
  return dst_host_.GetNoArena();
}
inline void DataStreamConsumerConnect::set_dst_host(const ::std::string& value) {
  
  dst_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Zemni_protobuf.DataStreamConsumerConnect.dst_host)
}
#if LANG_CXX11
inline void DataStreamConsumerConnect::set_dst_host(::std::string&& value) {
  
  dst_host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Zemni_protobuf.DataStreamConsumerConnect.dst_host)
}
#endif
inline void DataStreamConsumerConnect::set_dst_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dst_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Zemni_protobuf.DataStreamConsumerConnect.dst_host)
}
inline void DataStreamConsumerConnect::set_dst_host(const char* value, size_t size) {
  
  dst_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Zemni_protobuf.DataStreamConsumerConnect.dst_host)
}
inline ::std::string* DataStreamConsumerConnect::mutable_dst_host() {
  
  // @@protoc_insertion_point(field_mutable:Zemni_protobuf.DataStreamConsumerConnect.dst_host)
  return dst_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataStreamConsumerConnect::release_dst_host() {
  // @@protoc_insertion_point(field_release:Zemni_protobuf.DataStreamConsumerConnect.dst_host)
  
  return dst_host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataStreamConsumerConnect::set_allocated_dst_host(::std::string* dst_host) {
  if (dst_host != NULL) {
    
  } else {
    
  }
  dst_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dst_host);
  // @@protoc_insertion_point(field_set_allocated:Zemni_protobuf.DataStreamConsumerConnect.dst_host)
}

// int32 dst_host_id = 2;
inline void DataStreamConsumerConnect::clear_dst_host_id() {
  dst_host_id_ = 0;
}
inline ::google::protobuf::int32 DataStreamConsumerConnect::dst_host_id() const {
  // @@protoc_insertion_point(field_get:Zemni_protobuf.DataStreamConsumerConnect.dst_host_id)
  return dst_host_id_;
}
inline void DataStreamConsumerConnect::set_dst_host_id(::google::protobuf::int32 value) {
  
  dst_host_id_ = value;
  // @@protoc_insertion_point(field_set:Zemni_protobuf.DataStreamConsumerConnect.dst_host_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Zemni_protobuf

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Zemni_protobuf::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Zemni_protobuf::Type>() {
  return ::Zemni_protobuf::Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Queue_2eproto
