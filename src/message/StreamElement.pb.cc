// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StreamElement.proto

#include "StreamElement.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_StreamElement_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_StreamElement_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StreamElement;
}  // namespace protobuf_StreamElement_2eproto
namespace Zemni_protobuf {
class StreamElementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamElement>
      _instance;
} _StreamElement_default_instance_;
class StreamElementsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamElements>
      _instance;
} _StreamElements_default_instance_;
}  // namespace Zemni_protobuf
namespace protobuf_StreamElement_2eproto {
static void InitDefaultsStreamElement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Zemni_protobuf::_StreamElement_default_instance_;
    new (ptr) ::Zemni_protobuf::StreamElement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Zemni_protobuf::StreamElement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StreamElement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStreamElement}, {}};

static void InitDefaultsStreamElements() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Zemni_protobuf::_StreamElements_default_instance_;
    new (ptr) ::Zemni_protobuf::StreamElements();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Zemni_protobuf::StreamElements::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StreamElements =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStreamElements}, {
      &protobuf_StreamElement_2eproto::scc_info_StreamElement.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_StreamElement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StreamElements.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::StreamElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::StreamElement, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::StreamElement, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::StreamElement, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::StreamElement, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::StreamElement, value1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::StreamElement, value2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::StreamElement, int_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::StreamElements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::StreamElements, element_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::StreamElements, queue_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Zemni_protobuf::StreamElement)},
  { 12, -1, sizeof(::Zemni_protobuf::StreamElements)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Zemni_protobuf::_StreamElement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Zemni_protobuf::_StreamElements_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "StreamElement.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023StreamElement.proto\022\016Zemni_protobuf\"|\n"
      "\rStreamElement\022\014\n\004type\030\001 \001(\005\022\n\n\002id\030\002 \001(\003"
      "\022\021\n\ttimestamp\030\003 \001(\003\022\013\n\003key\030\004 \001(\014\022\016\n\006valu"
      "e1\030\005 \001(\014\022\016\n\006value2\030\006 \001(\014\022\021\n\tint_value\030\007 "
      "\001(\005\"R\n\016StreamElements\022.\n\007element\030\001 \003(\0132\035"
      ".Zemni_protobuf.StreamElement\022\020\n\010queue_i"
      "d\030\002 \001(\005*\230\002\n\021StreamElementType\022\037\n\033STREAM_"
      "ELEMENT_TYPE_UNKNOWN\020\000\022\036\n\032STREAM_ELEMENT"
      "_TYPE_RECORD\020\001\022!\n\035STREAM_ELEMENT_TYPE_WA"
      "TERMARK\020\002\022\"\n\036STREAM_ELEMENT_TYPE_SIGNAL_"
      "EOF\020\003\022,\n(STREAM_ELEMENT_TYPE_OPERATOR_ST"
      "OP_SIGNAL\020\004\022*\n&STREAM_ELEMENT_TYPE_CHECK"
      "POINT_BARRIER\020\005\022!\n\035STREAM_ELEMENT_TYPE_T"
      "IMESTAMP\020\006b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 538);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StreamElement.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_StreamElement_2eproto
namespace Zemni_protobuf {
const ::google::protobuf::EnumDescriptor* StreamElementType_descriptor() {
  protobuf_StreamElement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_StreamElement_2eproto::file_level_enum_descriptors[0];
}
bool StreamElementType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void StreamElement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamElement::kTypeFieldNumber;
const int StreamElement::kIdFieldNumber;
const int StreamElement::kTimestampFieldNumber;
const int StreamElement::kKeyFieldNumber;
const int StreamElement::kValue1FieldNumber;
const int StreamElement::kValue2FieldNumber;
const int StreamElement::kIntValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamElement::StreamElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StreamElement_2eproto::scc_info_StreamElement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Zemni_protobuf.StreamElement)
}
StreamElement::StreamElement(const StreamElement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value1().size() > 0) {
    value1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value1_);
  }
  value2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value2().size() > 0) {
    value2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value2_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&int_value_) -
    reinterpret_cast<char*>(&id_)) + sizeof(int_value_));
  // @@protoc_insertion_point(copy_constructor:Zemni_protobuf.StreamElement)
}

void StreamElement::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&int_value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(int_value_));
}

StreamElement::~StreamElement() {
  // @@protoc_insertion_point(destructor:Zemni_protobuf.StreamElement)
  SharedDtor();
}

void StreamElement::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StreamElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StreamElement::descriptor() {
  ::protobuf_StreamElement_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StreamElement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamElement& StreamElement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StreamElement_2eproto::scc_info_StreamElement.base);
  return *internal_default_instance();
}


void StreamElement::Clear() {
// @@protoc_insertion_point(message_clear_start:Zemni_protobuf.StreamElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&int_value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(int_value_));
  _internal_metadata_.Clear();
}

bool StreamElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Zemni_protobuf.StreamElement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value2 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 int_value = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Zemni_protobuf.StreamElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Zemni_protobuf.StreamElement)
  return false;
#undef DO_
}

void StreamElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Zemni_protobuf.StreamElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // bytes key = 4;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->key(), output);
  }

  // bytes value1 = 5;
  if (this->value1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->value1(), output);
  }

  // bytes value2 = 6;
  if (this->value2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->value2(), output);
  }

  // int32 int_value = 7;
  if (this->int_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->int_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Zemni_protobuf.StreamElement)
}

::google::protobuf::uint8* StreamElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Zemni_protobuf.StreamElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // bytes key = 4;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }

  // bytes value1 = 5;
  if (this->value1().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->value1(), target);
  }

  // bytes value2 = 6;
  if (this->value2().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->value2(), target);
  }

  // int32 int_value = 7;
  if (this->int_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->int_value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Zemni_protobuf.StreamElement)
  return target;
}

size_t StreamElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Zemni_protobuf.StreamElement)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 4;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value1 = 5;
  if (this->value1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value1());
  }

  // bytes value2 = 6;
  if (this->value2().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value2());
  }

  // int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 int_value = 7;
  if (this->int_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->int_value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Zemni_protobuf.StreamElement)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamElement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Zemni_protobuf.StreamElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Zemni_protobuf.StreamElement)
    MergeFrom(*source);
  }
}

void StreamElement::MergeFrom(const StreamElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Zemni_protobuf.StreamElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value1().size() > 0) {

    value1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value1_);
  }
  if (from.value2().size() > 0) {

    value2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value2_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.int_value() != 0) {
    set_int_value(from.int_value());
  }
}

void StreamElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Zemni_protobuf.StreamElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamElement::CopyFrom(const StreamElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Zemni_protobuf.StreamElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamElement::IsInitialized() const {
  return true;
}

void StreamElement::Swap(StreamElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamElement::InternalSwap(StreamElement* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value1_.Swap(&other->value1_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value2_.Swap(&other->value2_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(timestamp_, other->timestamp_);
  swap(type_, other->type_);
  swap(int_value_, other->int_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StreamElement::GetMetadata() const {
  protobuf_StreamElement_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StreamElement_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamElements::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamElements::kElementFieldNumber;
const int StreamElements::kQueueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamElements::StreamElements()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_StreamElement_2eproto::scc_info_StreamElements.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Zemni_protobuf.StreamElements)
}
StreamElements::StreamElements(const StreamElements& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      element_(from.element_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queue_id_ = from.queue_id_;
  // @@protoc_insertion_point(copy_constructor:Zemni_protobuf.StreamElements)
}

void StreamElements::SharedCtor() {
  queue_id_ = 0;
}

StreamElements::~StreamElements() {
  // @@protoc_insertion_point(destructor:Zemni_protobuf.StreamElements)
  SharedDtor();
}

void StreamElements::SharedDtor() {
}

void StreamElements::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StreamElements::descriptor() {
  ::protobuf_StreamElement_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StreamElement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamElements& StreamElements::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_StreamElement_2eproto::scc_info_StreamElements.base);
  return *internal_default_instance();
}


void StreamElements::Clear() {
// @@protoc_insertion_point(message_clear_start:Zemni_protobuf.StreamElements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  queue_id_ = 0;
  _internal_metadata_.Clear();
}

bool StreamElements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Zemni_protobuf.StreamElements)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Zemni_protobuf.StreamElement element = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 queue_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queue_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Zemni_protobuf.StreamElements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Zemni_protobuf.StreamElements)
  return false;
#undef DO_
}

void StreamElements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Zemni_protobuf.StreamElements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Zemni_protobuf.StreamElement element = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->element_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->element(static_cast<int>(i)),
      output);
  }

  // int32 queue_id = 2;
  if (this->queue_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->queue_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Zemni_protobuf.StreamElements)
}

::google::protobuf::uint8* StreamElements::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Zemni_protobuf.StreamElements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Zemni_protobuf.StreamElement element = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->element_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->element(static_cast<int>(i)), deterministic, target);
  }

  // int32 queue_id = 2;
  if (this->queue_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->queue_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Zemni_protobuf.StreamElements)
  return target;
}

size_t StreamElements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Zemni_protobuf.StreamElements)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Zemni_protobuf.StreamElement element = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->element_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->element(static_cast<int>(i)));
    }
  }

  // int32 queue_id = 2;
  if (this->queue_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->queue_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamElements::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Zemni_protobuf.StreamElements)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamElements* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamElements>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Zemni_protobuf.StreamElements)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Zemni_protobuf.StreamElements)
    MergeFrom(*source);
  }
}

void StreamElements::MergeFrom(const StreamElements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Zemni_protobuf.StreamElements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
  if (from.queue_id() != 0) {
    set_queue_id(from.queue_id());
  }
}

void StreamElements::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Zemni_protobuf.StreamElements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamElements::CopyFrom(const StreamElements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Zemni_protobuf.StreamElements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamElements::IsInitialized() const {
  return true;
}

void StreamElements::Swap(StreamElements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamElements::InternalSwap(StreamElements* other) {
  using std::swap;
  CastToBase(&element_)->InternalSwap(CastToBase(&other->element_));
  swap(queue_id_, other->queue_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StreamElements::GetMetadata() const {
  protobuf_StreamElement_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StreamElement_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Zemni_protobuf
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Zemni_protobuf::StreamElement* Arena::CreateMaybeMessage< ::Zemni_protobuf::StreamElement >(Arena* arena) {
  return Arena::CreateInternal< ::Zemni_protobuf::StreamElement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Zemni_protobuf::StreamElements* Arena::CreateMaybeMessage< ::Zemni_protobuf::StreamElements >(Arena* arena) {
  return Arena::CreateInternal< ::Zemni_protobuf::StreamElements >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
