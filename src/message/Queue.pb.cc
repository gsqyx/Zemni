// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Queue.proto

#include "Queue.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace Zemni_protobuf {
class NodeRegisterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeRegister>
      _instance;
} _NodeRegister_default_instance_;
class NodeRegisterReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeRegisterReply>
      _instance;
} _NodeRegisterReply_default_instance_;
class QueueRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueueRequest>
      _instance;
} _QueueRequest_default_instance_;
class QueueReleaseRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueueReleaseRequest>
      _instance;
} _QueueReleaseRequest_default_instance_;
class DataStreamProducerResetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataStreamProducerReset>
      _instance;
} _DataStreamProducerReset_default_instance_;
class DataStreamConsumerConnectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataStreamConsumerConnect>
      _instance;
} _DataStreamConsumerConnect_default_instance_;
}  // namespace Zemni_protobuf
namespace protobuf_Queue_2eproto {
static void InitDefaultsNodeRegister() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Zemni_protobuf::_NodeRegister_default_instance_;
    new (ptr) ::Zemni_protobuf::NodeRegister();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Zemni_protobuf::NodeRegister::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeRegister =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeRegister}, {}};

static void InitDefaultsNodeRegisterReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Zemni_protobuf::_NodeRegisterReply_default_instance_;
    new (ptr) ::Zemni_protobuf::NodeRegisterReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Zemni_protobuf::NodeRegisterReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeRegisterReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeRegisterReply}, {}};

static void InitDefaultsQueueRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Zemni_protobuf::_QueueRequest_default_instance_;
    new (ptr) ::Zemni_protobuf::QueueRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Zemni_protobuf::QueueRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_QueueRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQueueRequest}, {}};

static void InitDefaultsQueueReleaseRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Zemni_protobuf::_QueueReleaseRequest_default_instance_;
    new (ptr) ::Zemni_protobuf::QueueReleaseRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Zemni_protobuf::QueueReleaseRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_QueueReleaseRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQueueReleaseRequest}, {}};

static void InitDefaultsDataStreamProducerReset() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Zemni_protobuf::_DataStreamProducerReset_default_instance_;
    new (ptr) ::Zemni_protobuf::DataStreamProducerReset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Zemni_protobuf::DataStreamProducerReset::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DataStreamProducerReset =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDataStreamProducerReset}, {}};

static void InitDefaultsDataStreamConsumerConnect() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Zemni_protobuf::_DataStreamConsumerConnect_default_instance_;
    new (ptr) ::Zemni_protobuf::DataStreamConsumerConnect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Zemni_protobuf::DataStreamConsumerConnect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DataStreamConsumerConnect =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDataStreamConsumerConnect}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NodeRegister.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeRegisterReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QueueRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QueueReleaseRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataStreamProducerReset.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataStreamConsumerConnect.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::NodeRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::NodeRegister, host_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::NodeRegisterReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::NodeRegisterReply, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::NodeRegisterReply, actor_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::NodeRegisterReply, zmq_port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::QueueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::QueueRequest, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::QueueRequest, queue_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::QueueRequest, as_consumer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::QueueReleaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::QueueReleaseRequest, queue_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::QueueReleaseRequest, as_consumer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::QueueReleaseRequest, delete__),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::DataStreamProducerReset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::DataStreamProducerReset, queue_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::DataStreamProducerReset, dst_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::DataStreamProducerReset, dst_host_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::DataStreamConsumerConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::DataStreamConsumerConnect, dst_host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Zemni_protobuf::DataStreamConsumerConnect, dst_host_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Zemni_protobuf::NodeRegister)},
  { 6, -1, sizeof(::Zemni_protobuf::NodeRegisterReply)},
  { 14, -1, sizeof(::Zemni_protobuf::QueueRequest)},
  { 22, -1, sizeof(::Zemni_protobuf::QueueReleaseRequest)},
  { 30, -1, sizeof(::Zemni_protobuf::DataStreamProducerReset)},
  { 38, -1, sizeof(::Zemni_protobuf::DataStreamConsumerConnect)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Zemni_protobuf::_NodeRegister_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Zemni_protobuf::_NodeRegisterReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Zemni_protobuf::_QueueRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Zemni_protobuf::_QueueReleaseRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Zemni_protobuf::_DataStreamProducerReset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Zemni_protobuf::_DataStreamConsumerConnect_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Queue.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013Queue.proto\022\016Zemni_protobuf\"\034\n\014NodeReg"
      "ister\022\014\n\004host\030\001 \001(\t\"E\n\021NodeRegisterReply"
      "\022\n\n\002id\030\001 \001(\005\022\022\n\nactor_port\030\002 \001(\005\022\020\n\010zmq_"
      "port\030\003 \001(\005\"F\n\014QueueRequest\022\017\n\007node_id\030\001 "
      "\001(\005\022\020\n\010queue_id\030\002 \001(\005\022\023\n\013as_consumer\030\003 \001"
      "(\010\"L\n\023QueueReleaseRequest\022\020\n\010queue_id\030\001 "
      "\001(\005\022\023\n\013as_consumer\030\002 \001(\010\022\016\n\006delete\030\003 \001(\010"
      "\"R\n\027DataStreamProducerReset\022\020\n\010queue_id\030"
      "\001 \001(\005\022\020\n\010dst_port\030\003 \001(\005\022\023\n\013dst_host_id\030\004"
      " \001(\005\"B\n\031DataStreamConsumerConnect\022\020\n\010dst"
      "_host\030\001 \001(\t\022\023\n\013dst_host_id\030\002 \001(\005*\252\001\n\004Typ"
      "e\022\010\n\004NONE\020\000\022\021\n\rNODE_REGISTER\020\001\022\027\n\023NODE_R"
      "EGISTER_REPLY\020\002\022\021\n\rQUEUE_REQUEST\020\003\022\031\n\025QU"
      "EUE_RELEASE_REQUEST\020\005\022\035\n\031DATASTREAM_PROD"
      "UCER_RESET\020\007\022\037\n\033DATASTREAM_CONSUMER_CONN"
      "ECT\020\010b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 613);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Queue.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Queue_2eproto
namespace Zemni_protobuf {
const ::google::protobuf::EnumDescriptor* Type_descriptor() {
  protobuf_Queue_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Queue_2eproto::file_level_enum_descriptors[0];
}
bool Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void NodeRegister::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeRegister::kHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeRegister::NodeRegister()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Queue_2eproto::scc_info_NodeRegister.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Zemni_protobuf.NodeRegister)
}
NodeRegister::NodeRegister(const NodeRegister& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  // @@protoc_insertion_point(copy_constructor:Zemni_protobuf.NodeRegister)
}

void NodeRegister::SharedCtor() {
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NodeRegister::~NodeRegister() {
  // @@protoc_insertion_point(destructor:Zemni_protobuf.NodeRegister)
  SharedDtor();
}

void NodeRegister::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NodeRegister::descriptor() {
  ::protobuf_Queue_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Queue_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeRegister& NodeRegister::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Queue_2eproto::scc_info_NodeRegister.base);
  return *internal_default_instance();
}


void NodeRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:Zemni_protobuf.NodeRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool NodeRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Zemni_protobuf.NodeRegister)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Zemni_protobuf.NodeRegister.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Zemni_protobuf.NodeRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Zemni_protobuf.NodeRegister)
  return false;
#undef DO_
}

void NodeRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Zemni_protobuf.NodeRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Zemni_protobuf.NodeRegister.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Zemni_protobuf.NodeRegister)
}

::google::protobuf::uint8* NodeRegister::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Zemni_protobuf.NodeRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Zemni_protobuf.NodeRegister.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Zemni_protobuf.NodeRegister)
  return target;
}

size_t NodeRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Zemni_protobuf.NodeRegister)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeRegister::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Zemni_protobuf.NodeRegister)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeRegister* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeRegister>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Zemni_protobuf.NodeRegister)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Zemni_protobuf.NodeRegister)
    MergeFrom(*source);
  }
}

void NodeRegister::MergeFrom(const NodeRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Zemni_protobuf.NodeRegister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
}

void NodeRegister::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Zemni_protobuf.NodeRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRegister::CopyFrom(const NodeRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Zemni_protobuf.NodeRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRegister::IsInitialized() const {
  return true;
}

void NodeRegister::Swap(NodeRegister* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeRegister::InternalSwap(NodeRegister* other) {
  using std::swap;
  host_.Swap(&other->host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NodeRegister::GetMetadata() const {
  protobuf_Queue_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Queue_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NodeRegisterReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeRegisterReply::kIdFieldNumber;
const int NodeRegisterReply::kActorPortFieldNumber;
const int NodeRegisterReply::kZmqPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeRegisterReply::NodeRegisterReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Queue_2eproto::scc_info_NodeRegisterReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Zemni_protobuf.NodeRegisterReply)
}
NodeRegisterReply::NodeRegisterReply(const NodeRegisterReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&zmq_port_) -
    reinterpret_cast<char*>(&id_)) + sizeof(zmq_port_));
  // @@protoc_insertion_point(copy_constructor:Zemni_protobuf.NodeRegisterReply)
}

void NodeRegisterReply::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zmq_port_) -
      reinterpret_cast<char*>(&id_)) + sizeof(zmq_port_));
}

NodeRegisterReply::~NodeRegisterReply() {
  // @@protoc_insertion_point(destructor:Zemni_protobuf.NodeRegisterReply)
  SharedDtor();
}

void NodeRegisterReply::SharedDtor() {
}

void NodeRegisterReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NodeRegisterReply::descriptor() {
  ::protobuf_Queue_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Queue_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeRegisterReply& NodeRegisterReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Queue_2eproto::scc_info_NodeRegisterReply.base);
  return *internal_default_instance();
}


void NodeRegisterReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Zemni_protobuf.NodeRegisterReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zmq_port_) -
      reinterpret_cast<char*>(&id_)) + sizeof(zmq_port_));
  _internal_metadata_.Clear();
}

bool NodeRegisterReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Zemni_protobuf.NodeRegisterReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 actor_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actor_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 zmq_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zmq_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Zemni_protobuf.NodeRegisterReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Zemni_protobuf.NodeRegisterReply)
  return false;
#undef DO_
}

void NodeRegisterReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Zemni_protobuf.NodeRegisterReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 actor_port = 2;
  if (this->actor_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->actor_port(), output);
  }

  // int32 zmq_port = 3;
  if (this->zmq_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->zmq_port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Zemni_protobuf.NodeRegisterReply)
}

::google::protobuf::uint8* NodeRegisterReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Zemni_protobuf.NodeRegisterReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 actor_port = 2;
  if (this->actor_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->actor_port(), target);
  }

  // int32 zmq_port = 3;
  if (this->zmq_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->zmq_port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Zemni_protobuf.NodeRegisterReply)
  return target;
}

size_t NodeRegisterReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Zemni_protobuf.NodeRegisterReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 actor_port = 2;
  if (this->actor_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actor_port());
  }

  // int32 zmq_port = 3;
  if (this->zmq_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zmq_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeRegisterReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Zemni_protobuf.NodeRegisterReply)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeRegisterReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeRegisterReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Zemni_protobuf.NodeRegisterReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Zemni_protobuf.NodeRegisterReply)
    MergeFrom(*source);
  }
}

void NodeRegisterReply::MergeFrom(const NodeRegisterReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Zemni_protobuf.NodeRegisterReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.actor_port() != 0) {
    set_actor_port(from.actor_port());
  }
  if (from.zmq_port() != 0) {
    set_zmq_port(from.zmq_port());
  }
}

void NodeRegisterReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Zemni_protobuf.NodeRegisterReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRegisterReply::CopyFrom(const NodeRegisterReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Zemni_protobuf.NodeRegisterReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRegisterReply::IsInitialized() const {
  return true;
}

void NodeRegisterReply::Swap(NodeRegisterReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeRegisterReply::InternalSwap(NodeRegisterReply* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(actor_port_, other->actor_port_);
  swap(zmq_port_, other->zmq_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NodeRegisterReply::GetMetadata() const {
  protobuf_Queue_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Queue_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QueueRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueueRequest::kNodeIdFieldNumber;
const int QueueRequest::kQueueIdFieldNumber;
const int QueueRequest::kAsConsumerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueueRequest::QueueRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Queue_2eproto::scc_info_QueueRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Zemni_protobuf.QueueRequest)
}
QueueRequest::QueueRequest(const QueueRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&as_consumer_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(as_consumer_));
  // @@protoc_insertion_point(copy_constructor:Zemni_protobuf.QueueRequest)
}

void QueueRequest::SharedCtor() {
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&as_consumer_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(as_consumer_));
}

QueueRequest::~QueueRequest() {
  // @@protoc_insertion_point(destructor:Zemni_protobuf.QueueRequest)
  SharedDtor();
}

void QueueRequest::SharedDtor() {
}

void QueueRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* QueueRequest::descriptor() {
  ::protobuf_Queue_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Queue_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueueRequest& QueueRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Queue_2eproto::scc_info_QueueRequest.base);
  return *internal_default_instance();
}


void QueueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Zemni_protobuf.QueueRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&as_consumer_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(as_consumer_));
  _internal_metadata_.Clear();
}

bool QueueRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Zemni_protobuf.QueueRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 queue_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queue_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool as_consumer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &as_consumer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Zemni_protobuf.QueueRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Zemni_protobuf.QueueRequest)
  return false;
#undef DO_
}

void QueueRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Zemni_protobuf.QueueRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // int32 queue_id = 2;
  if (this->queue_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->queue_id(), output);
  }

  // bool as_consumer = 3;
  if (this->as_consumer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->as_consumer(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Zemni_protobuf.QueueRequest)
}

::google::protobuf::uint8* QueueRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Zemni_protobuf.QueueRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // int32 queue_id = 2;
  if (this->queue_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->queue_id(), target);
  }

  // bool as_consumer = 3;
  if (this->as_consumer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->as_consumer(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Zemni_protobuf.QueueRequest)
  return target;
}

size_t QueueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Zemni_protobuf.QueueRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  // int32 queue_id = 2;
  if (this->queue_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->queue_id());
  }

  // bool as_consumer = 3;
  if (this->as_consumer() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueueRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Zemni_protobuf.QueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueueRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueueRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Zemni_protobuf.QueueRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Zemni_protobuf.QueueRequest)
    MergeFrom(*source);
  }
}

void QueueRequest::MergeFrom(const QueueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Zemni_protobuf.QueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.queue_id() != 0) {
    set_queue_id(from.queue_id());
  }
  if (from.as_consumer() != 0) {
    set_as_consumer(from.as_consumer());
  }
}

void QueueRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Zemni_protobuf.QueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueueRequest::CopyFrom(const QueueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Zemni_protobuf.QueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueRequest::IsInitialized() const {
  return true;
}

void QueueRequest::Swap(QueueRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueueRequest::InternalSwap(QueueRequest* other) {
  using std::swap;
  swap(node_id_, other->node_id_);
  swap(queue_id_, other->queue_id_);
  swap(as_consumer_, other->as_consumer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata QueueRequest::GetMetadata() const {
  protobuf_Queue_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Queue_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QueueReleaseRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueueReleaseRequest::kQueueIdFieldNumber;
const int QueueReleaseRequest::kAsConsumerFieldNumber;
const int QueueReleaseRequest::kDeleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueueReleaseRequest::QueueReleaseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Queue_2eproto::scc_info_QueueReleaseRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Zemni_protobuf.QueueReleaseRequest)
}
QueueReleaseRequest::QueueReleaseRequest(const QueueReleaseRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&queue_id_, &from.queue_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&delete__) -
    reinterpret_cast<char*>(&queue_id_)) + sizeof(delete__));
  // @@protoc_insertion_point(copy_constructor:Zemni_protobuf.QueueReleaseRequest)
}

void QueueReleaseRequest::SharedCtor() {
  ::memset(&queue_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delete__) -
      reinterpret_cast<char*>(&queue_id_)) + sizeof(delete__));
}

QueueReleaseRequest::~QueueReleaseRequest() {
  // @@protoc_insertion_point(destructor:Zemni_protobuf.QueueReleaseRequest)
  SharedDtor();
}

void QueueReleaseRequest::SharedDtor() {
}

void QueueReleaseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* QueueReleaseRequest::descriptor() {
  ::protobuf_Queue_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Queue_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueueReleaseRequest& QueueReleaseRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Queue_2eproto::scc_info_QueueReleaseRequest.base);
  return *internal_default_instance();
}


void QueueReleaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Zemni_protobuf.QueueReleaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&queue_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delete__) -
      reinterpret_cast<char*>(&queue_id_)) + sizeof(delete__));
  _internal_metadata_.Clear();
}

bool QueueReleaseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Zemni_protobuf.QueueReleaseRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 queue_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queue_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool as_consumer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &as_consumer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool delete = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delete__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Zemni_protobuf.QueueReleaseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Zemni_protobuf.QueueReleaseRequest)
  return false;
#undef DO_
}

void QueueReleaseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Zemni_protobuf.QueueReleaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 queue_id = 1;
  if (this->queue_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->queue_id(), output);
  }

  // bool as_consumer = 2;
  if (this->as_consumer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->as_consumer(), output);
  }

  // bool delete = 3;
  if (this->delete_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->delete_(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Zemni_protobuf.QueueReleaseRequest)
}

::google::protobuf::uint8* QueueReleaseRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Zemni_protobuf.QueueReleaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 queue_id = 1;
  if (this->queue_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->queue_id(), target);
  }

  // bool as_consumer = 2;
  if (this->as_consumer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->as_consumer(), target);
  }

  // bool delete = 3;
  if (this->delete_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->delete_(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Zemni_protobuf.QueueReleaseRequest)
  return target;
}

size_t QueueReleaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Zemni_protobuf.QueueReleaseRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 queue_id = 1;
  if (this->queue_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->queue_id());
  }

  // bool as_consumer = 2;
  if (this->as_consumer() != 0) {
    total_size += 1 + 1;
  }

  // bool delete = 3;
  if (this->delete_() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueueReleaseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Zemni_protobuf.QueueReleaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueueReleaseRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueueReleaseRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Zemni_protobuf.QueueReleaseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Zemni_protobuf.QueueReleaseRequest)
    MergeFrom(*source);
  }
}

void QueueReleaseRequest::MergeFrom(const QueueReleaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Zemni_protobuf.QueueReleaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queue_id() != 0) {
    set_queue_id(from.queue_id());
  }
  if (from.as_consumer() != 0) {
    set_as_consumer(from.as_consumer());
  }
  if (from.delete_() != 0) {
    set_delete_(from.delete_());
  }
}

void QueueReleaseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Zemni_protobuf.QueueReleaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueueReleaseRequest::CopyFrom(const QueueReleaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Zemni_protobuf.QueueReleaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueReleaseRequest::IsInitialized() const {
  return true;
}

void QueueReleaseRequest::Swap(QueueReleaseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueueReleaseRequest::InternalSwap(QueueReleaseRequest* other) {
  using std::swap;
  swap(queue_id_, other->queue_id_);
  swap(as_consumer_, other->as_consumer_);
  swap(delete__, other->delete__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata QueueReleaseRequest::GetMetadata() const {
  protobuf_Queue_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Queue_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DataStreamProducerReset::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataStreamProducerReset::kQueueIdFieldNumber;
const int DataStreamProducerReset::kDstPortFieldNumber;
const int DataStreamProducerReset::kDstHostIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataStreamProducerReset::DataStreamProducerReset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Queue_2eproto::scc_info_DataStreamProducerReset.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Zemni_protobuf.DataStreamProducerReset)
}
DataStreamProducerReset::DataStreamProducerReset(const DataStreamProducerReset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&queue_id_, &from.queue_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dst_host_id_) -
    reinterpret_cast<char*>(&queue_id_)) + sizeof(dst_host_id_));
  // @@protoc_insertion_point(copy_constructor:Zemni_protobuf.DataStreamProducerReset)
}

void DataStreamProducerReset::SharedCtor() {
  ::memset(&queue_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_host_id_) -
      reinterpret_cast<char*>(&queue_id_)) + sizeof(dst_host_id_));
}

DataStreamProducerReset::~DataStreamProducerReset() {
  // @@protoc_insertion_point(destructor:Zemni_protobuf.DataStreamProducerReset)
  SharedDtor();
}

void DataStreamProducerReset::SharedDtor() {
}

void DataStreamProducerReset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DataStreamProducerReset::descriptor() {
  ::protobuf_Queue_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Queue_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataStreamProducerReset& DataStreamProducerReset::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Queue_2eproto::scc_info_DataStreamProducerReset.base);
  return *internal_default_instance();
}


void DataStreamProducerReset::Clear() {
// @@protoc_insertion_point(message_clear_start:Zemni_protobuf.DataStreamProducerReset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&queue_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_host_id_) -
      reinterpret_cast<char*>(&queue_id_)) + sizeof(dst_host_id_));
  _internal_metadata_.Clear();
}

bool DataStreamProducerReset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Zemni_protobuf.DataStreamProducerReset)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 queue_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queue_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dst_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dst_host_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_host_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Zemni_protobuf.DataStreamProducerReset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Zemni_protobuf.DataStreamProducerReset)
  return false;
#undef DO_
}

void DataStreamProducerReset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Zemni_protobuf.DataStreamProducerReset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 queue_id = 1;
  if (this->queue_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->queue_id(), output);
  }

  // int32 dst_port = 3;
  if (this->dst_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dst_port(), output);
  }

  // int32 dst_host_id = 4;
  if (this->dst_host_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dst_host_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Zemni_protobuf.DataStreamProducerReset)
}

::google::protobuf::uint8* DataStreamProducerReset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Zemni_protobuf.DataStreamProducerReset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 queue_id = 1;
  if (this->queue_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->queue_id(), target);
  }

  // int32 dst_port = 3;
  if (this->dst_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dst_port(), target);
  }

  // int32 dst_host_id = 4;
  if (this->dst_host_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dst_host_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Zemni_protobuf.DataStreamProducerReset)
  return target;
}

size_t DataStreamProducerReset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Zemni_protobuf.DataStreamProducerReset)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 queue_id = 1;
  if (this->queue_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->queue_id());
  }

  // int32 dst_port = 3;
  if (this->dst_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dst_port());
  }

  // int32 dst_host_id = 4;
  if (this->dst_host_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dst_host_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataStreamProducerReset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Zemni_protobuf.DataStreamProducerReset)
  GOOGLE_DCHECK_NE(&from, this);
  const DataStreamProducerReset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataStreamProducerReset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Zemni_protobuf.DataStreamProducerReset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Zemni_protobuf.DataStreamProducerReset)
    MergeFrom(*source);
  }
}

void DataStreamProducerReset::MergeFrom(const DataStreamProducerReset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Zemni_protobuf.DataStreamProducerReset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queue_id() != 0) {
    set_queue_id(from.queue_id());
  }
  if (from.dst_port() != 0) {
    set_dst_port(from.dst_port());
  }
  if (from.dst_host_id() != 0) {
    set_dst_host_id(from.dst_host_id());
  }
}

void DataStreamProducerReset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Zemni_protobuf.DataStreamProducerReset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataStreamProducerReset::CopyFrom(const DataStreamProducerReset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Zemni_protobuf.DataStreamProducerReset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStreamProducerReset::IsInitialized() const {
  return true;
}

void DataStreamProducerReset::Swap(DataStreamProducerReset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataStreamProducerReset::InternalSwap(DataStreamProducerReset* other) {
  using std::swap;
  swap(queue_id_, other->queue_id_);
  swap(dst_port_, other->dst_port_);
  swap(dst_host_id_, other->dst_host_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DataStreamProducerReset::GetMetadata() const {
  protobuf_Queue_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Queue_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DataStreamConsumerConnect::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataStreamConsumerConnect::kDstHostFieldNumber;
const int DataStreamConsumerConnect::kDstHostIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataStreamConsumerConnect::DataStreamConsumerConnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Queue_2eproto::scc_info_DataStreamConsumerConnect.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Zemni_protobuf.DataStreamConsumerConnect)
}
DataStreamConsumerConnect::DataStreamConsumerConnect(const DataStreamConsumerConnect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dst_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dst_host().size() > 0) {
    dst_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_host_);
  }
  dst_host_id_ = from.dst_host_id_;
  // @@protoc_insertion_point(copy_constructor:Zemni_protobuf.DataStreamConsumerConnect)
}

void DataStreamConsumerConnect::SharedCtor() {
  dst_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_host_id_ = 0;
}

DataStreamConsumerConnect::~DataStreamConsumerConnect() {
  // @@protoc_insertion_point(destructor:Zemni_protobuf.DataStreamConsumerConnect)
  SharedDtor();
}

void DataStreamConsumerConnect::SharedDtor() {
  dst_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataStreamConsumerConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DataStreamConsumerConnect::descriptor() {
  ::protobuf_Queue_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Queue_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataStreamConsumerConnect& DataStreamConsumerConnect::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Queue_2eproto::scc_info_DataStreamConsumerConnect.base);
  return *internal_default_instance();
}


void DataStreamConsumerConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:Zemni_protobuf.DataStreamConsumerConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dst_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_host_id_ = 0;
  _internal_metadata_.Clear();
}

bool DataStreamConsumerConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Zemni_protobuf.DataStreamConsumerConnect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dst_host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dst_host().data(), static_cast<int>(this->dst_host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Zemni_protobuf.DataStreamConsumerConnect.dst_host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dst_host_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_host_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Zemni_protobuf.DataStreamConsumerConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Zemni_protobuf.DataStreamConsumerConnect)
  return false;
#undef DO_
}

void DataStreamConsumerConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Zemni_protobuf.DataStreamConsumerConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dst_host = 1;
  if (this->dst_host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dst_host().data(), static_cast<int>(this->dst_host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Zemni_protobuf.DataStreamConsumerConnect.dst_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dst_host(), output);
  }

  // int32 dst_host_id = 2;
  if (this->dst_host_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dst_host_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Zemni_protobuf.DataStreamConsumerConnect)
}

::google::protobuf::uint8* DataStreamConsumerConnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Zemni_protobuf.DataStreamConsumerConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dst_host = 1;
  if (this->dst_host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dst_host().data(), static_cast<int>(this->dst_host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Zemni_protobuf.DataStreamConsumerConnect.dst_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dst_host(), target);
  }

  // int32 dst_host_id = 2;
  if (this->dst_host_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dst_host_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Zemni_protobuf.DataStreamConsumerConnect)
  return target;
}

size_t DataStreamConsumerConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Zemni_protobuf.DataStreamConsumerConnect)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string dst_host = 1;
  if (this->dst_host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dst_host());
  }

  // int32 dst_host_id = 2;
  if (this->dst_host_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dst_host_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataStreamConsumerConnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Zemni_protobuf.DataStreamConsumerConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const DataStreamConsumerConnect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataStreamConsumerConnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Zemni_protobuf.DataStreamConsumerConnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Zemni_protobuf.DataStreamConsumerConnect)
    MergeFrom(*source);
  }
}

void DataStreamConsumerConnect::MergeFrom(const DataStreamConsumerConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Zemni_protobuf.DataStreamConsumerConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dst_host().size() > 0) {

    dst_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_host_);
  }
  if (from.dst_host_id() != 0) {
    set_dst_host_id(from.dst_host_id());
  }
}

void DataStreamConsumerConnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Zemni_protobuf.DataStreamConsumerConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataStreamConsumerConnect::CopyFrom(const DataStreamConsumerConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Zemni_protobuf.DataStreamConsumerConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStreamConsumerConnect::IsInitialized() const {
  return true;
}

void DataStreamConsumerConnect::Swap(DataStreamConsumerConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataStreamConsumerConnect::InternalSwap(DataStreamConsumerConnect* other) {
  using std::swap;
  dst_host_.Swap(&other->dst_host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dst_host_id_, other->dst_host_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DataStreamConsumerConnect::GetMetadata() const {
  protobuf_Queue_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Queue_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Zemni_protobuf
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Zemni_protobuf::NodeRegister* Arena::CreateMaybeMessage< ::Zemni_protobuf::NodeRegister >(Arena* arena) {
  return Arena::CreateInternal< ::Zemni_protobuf::NodeRegister >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Zemni_protobuf::NodeRegisterReply* Arena::CreateMaybeMessage< ::Zemni_protobuf::NodeRegisterReply >(Arena* arena) {
  return Arena::CreateInternal< ::Zemni_protobuf::NodeRegisterReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Zemni_protobuf::QueueRequest* Arena::CreateMaybeMessage< ::Zemni_protobuf::QueueRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Zemni_protobuf::QueueRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Zemni_protobuf::QueueReleaseRequest* Arena::CreateMaybeMessage< ::Zemni_protobuf::QueueReleaseRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Zemni_protobuf::QueueReleaseRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Zemni_protobuf::DataStreamProducerReset* Arena::CreateMaybeMessage< ::Zemni_protobuf::DataStreamProducerReset >(Arena* arena) {
  return Arena::CreateInternal< ::Zemni_protobuf::DataStreamProducerReset >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Zemni_protobuf::DataStreamConsumerConnect* Arena::CreateMaybeMessage< ::Zemni_protobuf::DataStreamConsumerConnect >(Arena* arena) {
  return Arena::CreateInternal< ::Zemni_protobuf::DataStreamConsumerConnect >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
